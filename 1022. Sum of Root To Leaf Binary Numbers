//C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumRootToLeaf(TreeNode* root) {
        if(!root) return 0;
        int s=root->val;
        if(!root->left&&!root->right) return s;
        int c=0;
        if(root->left) c+=addLeaf(root->left,s);
        if(root->right) c+=addLeaf(root->right,s);
        return c;
    }
    
    int addLeaf(TreeNode* root, int s){
        s=s*2+root->val;
        if(!root->left&&!root->right) return s;
        int c=0;
        if(root->left) c+=addLeaf(root->left,s);
        if(root->right) c+=addLeaf(root->right,s);
        return c;
    }
};

//Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        if not root: return 0
        s=root.val
        if not root.left and not root.right: return s
        c=0
        if root.left: c+=self.addLeaf(root.left,s)
        if root.right: c+=self.addLeaf(root.right,s)
        return c
        
    def addLeaf(self, root: TreeNode, s: int) -> int:
        s=s*2+root.val
        if not root.left and not root.right: return s
        c=0
        if root.left: c+=self.addLeaf(root.left,s)
        if root.right: c+=self.addLeaf(root.right,s)
        return c
