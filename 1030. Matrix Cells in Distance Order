//C++
class Solution {
public:
    vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {
        vector<vector<int>> L={{r0,c0}};
        int m1=max(r0+c0,R+C-2-r0-c0),m2=max(r0+C-1-c0,c0+R-1-r0);
        int m=max(m1,m2);
        for(int n=1;n<=m;n++){
            if(c0+n<C) L.push_back({r0,c0+n});
            if(c0-n>=0) L.push_back({r0,c0-n});
            if(r0+n<R) L.push_back({r0+n,c0});
            if(r0-n>=0) L.push_back({r0-n,c0});
            for(int i=1;i<n;i++){
                int j=n-i;
                if(r0+i<R && c0+j<C) L.push_back({r0+i,c0+j});
                if(r0-i>=0 && c0+j<C) L.push_back({r0-i,c0+j});
                if(r0-i>=0 && c0-j>=0) L.push_back({r0-i,c0-j});
                if(r0+i<R && c0-j>=0) L.push_back({r0+i,c0-j});
            }
        }
        return L;
    }
};

//Python
class Solution:
    def allCellsDistOrder(self, R: int, C: int, r0: int, c0: int) -> List[List[int]]:
        L=[[r0,c0]]
        for n in range(1,max(r0+c0,R+C-2-r0-c0,r0+C-1-c0,c0+R-1-r0)+1):
            if c0+n<C: L.append([r0,c0+n])
            if c0-n>=0: L.append([r0,c0-n])
            if r0+n<R: L.append([r0+n,c0])
            if r0-n>=0: L.append([r0-n,c0])
            for i in range(1,n):
                j=n-i
                if r0+i<R and c0+j<C: L.append([r0+i,c0+j])
                if r0-i>=0 and c0+j<C: L.append([r0-i,c0+j])
                if r0-i>=0 and c0-j>=0: L.append([r0-i,c0-j])
                if r0+i<R and c0-j>=0: L.append([r0+i,c0-j])
        return L
