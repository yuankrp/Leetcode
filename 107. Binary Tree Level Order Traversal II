//C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> vLL;
        if(root==NULL){
            return vLL;
        }
        vector<TreeNode*> vNode;        
        vNode.push_back(root);       
        while(!vNode.empty()){
            vector<int> tempV;
            int L=vNode.size();
            for(int i=0;i<L;i++){
                tempV.push_back(vNode[i]->val);
                if(vNode[i]->left!=NULL){
                    vNode.push_back(vNode[i]->left);
                }
                if(vNode[i]->right!=NULL){
                    vNode.push_back(vNode[i]->right);
                }
            }
            vNode.erase(vNode.begin(),vNode.begin()+L);
            vLL.insert(vLL.begin(),tempV);
        }
        return vLL;        
    }
};

//Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        LL=[]
        if root==None: return LL;
        LN=[]
        LN.append(root)
        while len(LN)>0:
            L=len(LN)
            tempL=[]
            for i in range(L):
                tempL.append(LN[i].val)
                if LN[i].left!=None: LN.append(LN[i].left)
                if LN[i].right!=None: LN.append(LN[i].right)
            del LN[0:L]
            LL.insert(0,tempL)
        return LL
