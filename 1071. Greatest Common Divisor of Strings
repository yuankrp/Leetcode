//C++
class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        vector<string> L1=listofDivisors(str1),L2=listofDivisors(str2);
        string res;
        for(string s: L1){
            if((find(L2.begin(),L2.end(),s)!=L2.end())&&s.length()>res.length()) res=s;
        }
        return res;
    }
    
    vector<string> listofDivisors(string s){
        vector<string> L={s};
        int le=s.length();
        for(int i=1;i<le/2+1;i++){
            if(le%i==0){
                string t=s.substr(0,i);
                string r;
                for(int j=0;j<le/i;j++){
                    r+=t;
                }
                if(r==s) L.push_back(t);
            }
        }
        return L;
    }
};

//Python
class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        L1=self.listofDivisor(str1)
        L2=self.listofDivisor(str2)
        res=""
        for s in L1:
            if s in L2 and len(s)>len(res): res=s
        return res
        
    def listofDivisor(self, s: str) -> List[int]:
        L=[s]
        le=len(s)
        for i in range(1,len(s)//2+1):
            if le%i==0:
                t=s[0:i]
                r=""
                for j in range(le//i):
                    r+=t
                if r==s: L.append(t)
        return L
