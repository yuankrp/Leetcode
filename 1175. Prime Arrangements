//C++
class Solution {
public:
    int numPrimeArrangements(int n) {
        vector<int> L(n,0);
        L[0]=1;
        for(int i=2;i<=n/2;i++){
            int j=2;
            while(i*j<=n){
                L[i*j-1]=1;
                j++;
            }
        }
        int a=count(L.begin(),L.end(),1);
        int b=n-a;
        long c=1,m=1e9 + 7;
        for(int k=1;k<=a;k++){
            c=(c*k)%m;
        }
        for(int k=1;k<=b;k++){
            c=(c*k)%m;
        }
        return c;
    }
};

//Python
class Solution:
    def numPrimeArrangements(self, n: int) -> int:
        L=[0]*n
        L[0]=1
        for i in range(2,n//2+1):
            j=2
            while i*j<=n:
                L[i*j-1]=1
                j+=1
        a=L.count(1)
        b=n-a
        c=1
        d=1
        for k in range(1,a+1):
            c=c*k
        for k in range(1,b+1):
            d=d*k
        return c*d%(10**9+7)
