//C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL){
            return false;
        }
        if(head->next==NULL){
            return false;
        }
        ListNode *p=head;
        while(p->next!=NULL){
            if(p->next==head){
                return true;
            }
            else{
                ListNode *temp=p->next;
                p->next=head;
                p=temp;
            }
        }
        return false;     
    }
};

//Python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head==None: return False
        if head.next==None: return False
        p=head
        while p.next!=None:
            if p.next==head: return True
            else:
                temp=p.next
                p.next=head
                p=temp
        return False
