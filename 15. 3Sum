//C++
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        if(nums.size()<3 || nums.back()<0 || nums.front()>0) return {};
        for(int k=0;k<nums.size()-2;k++){
            if(nums[k]>0) break;
            if(k>0 && nums[k]==nums[k-1]) continue;
            int i=k+1,j=nums.size()-1;
            while(i<j){
                if(nums[i]+nums[j]+nums[k]==0){
                    res.push_back({nums[k], nums[i], nums[j]});
                    while(i<j && nums[i]==nums[i+1]) i++;
                    while(i<j && nums[j]==nums[j-1]) j--;
                    i++;
                    j--;
                }
                else if(nums[i]+nums[j]+nums[k]<0) i++;
                else j--;
            }
        }
        return res;
    }
};

//Python
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        L=[]
        nums.sort()
        for i in range(len(nums)-2):
            if nums[i]>0: break
            if i>0 and nums[i]==nums[i-1]: continue
            j=i+1
            k=len(nums)-1
            while j<k:
                if nums[i]+nums[j]+nums[k]==0:
                    L.append([nums[i],nums[j],nums[k]])
                    while j<k and nums[j]==nums[j+1]: j+=1
                    while j<k and nums[k]==nums[k-1]: k-=1
                    j+=1
                    k-=1
                elif nums[i]>-nums[j]-nums[k]:
                    k-=1
                else: j+=1
        return L
