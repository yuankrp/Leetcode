//C++
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int s=0,gap=INT_MAX;
        for(int k=0;k<nums.size()-2;k++){
            if(nums[k]+nums[k+1]+nums[k+2]>target&&nums[k]+nums[k+1]+nums[k+2]-target>gap) return s;
            int i=k+1,j=nums.size()-1;
            while(i<j){
                if(nums[k]+nums[i]+nums[j]==target) return target;
                else if(nums[k]+nums[i]+nums[j]>target){
                    if(nums[k]+nums[i]+nums[j]-target<gap){
                        gap=nums[k]+nums[i]+nums[j]-target;
                        s=nums[k]+nums[i]+nums[j];
                    }
                    j--;
                }
                else{
                    if(target-(nums[k]+nums[i]+nums[j])<gap){
                        gap=target-(nums[k]+nums[i]+nums[j]);
                        s=nums[k]+nums[i]+nums[j];
                    }
                    i++;
                }
            }
        }
        return s;
    }
};

//Python
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        s=0
        gap=sys.maxsize
        for k in range(len(nums)-2):
            if sum(nums[k:k+3])>target and sum(nums[k:k+3])-target>gap: return s
            i=k+1
            j=len(nums)-1
            while i<j:
                if nums[k]+nums[i]+nums[j]==target: return target
                elif nums[k]+nums[i]+nums[j]>target:
                    if nums[k]+nums[i]+nums[j]-target<gap:
                        gap=nums[k]+nums[i]+nums[j]-target
                        s=nums[k]+nums[i]+nums[j]
                    j-=1
                else:
                    if target-(nums[k]+nums[i]+nums[j])<gap:
                        gap=target-(nums[k]+nums[i]+nums[j])
                        s=nums[k]+nums[i]+nums[j]
                    i+=1
        return s
