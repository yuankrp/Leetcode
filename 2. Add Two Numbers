//C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* L=new ListNode((l1->val+l2->val)%10);
        ListNode* p=L;
        ListNode* node=NULL;
        int c=(l1->val+l2->val)/10;
        l1=l1->next;
        l2=l2->next;
        int i=0;
        while(l1 || l2 || c){
            int s1=0,s2=0;
            if(l1){
                s1=l1->val;
                l1=l1->next;
            }
            if(l2){
                s2=l2->val;
                l2=l2->next;
            }
            node=new ListNode((s1+s2+c)%10);
            p->next=node;
            p=p->next;
            c=(s1+s2+c)/10;
        }
        return L;
    }
};

//Python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        s1=s2=0
        i=j=0
        while l1:
            s1+=l1.val*(10**i)
            i+=1
            l1=l1.next
        while l2:
            s2+=l2.val*(10**j)
            j+=1
            l2=l2.next
        s=s1+s2
        L=ListNode(s%10)
        p=L
        s=s//10
        while s>0:
            p.next=ListNode(s%10)
            s=s//10
            p=p.next
        return L
