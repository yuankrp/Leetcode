//C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL){
            return l2;
        }
        if(l2==NULL){
            return l1;
        }
        vector<int> v;
        while(l1){
            v.push_back(l1->val);
            l1=l1->next;
        }
        while(l2){
            v.push_back(l2->val);
            l2=l2->next;
        }
        sort(v.begin(),v.end());
        ListNode *LN= new ListNode(v[0]);
        ListNode *ln=LN;
        for(int i=1;i<v.size();i++){
            ListNode *p= new ListNode(v[i]);
            ln->next=p;
            ln=ln->next;          
        }
        return LN;        
    }
};

//Python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1==None:
            return l2
        if l2==None:
            return l1
        L=[]
        while l1:
            L.append(l1.val)
            l1=l1.next
        while l2:
            L.append(l2.val)
            l2=l2.next
        L.sort()
        LN=ListNode(L[0])
        LNtemp=LN
        for i in range(1,len(L)):
            ln=ListNode(L[i])
            LNtemp.next=ln
            LNtemp=LNtemp.next
        return LN
