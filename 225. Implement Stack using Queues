//C++
class MyStack {
private:
    queue<int> q;
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int p=q.back();
        for(int i=0;i<q.size()-1;i++){
            q.push(q.front());
            q.pop();
        }
        q.pop();
        return p;
    }
    
    /** Get the top element. */
    int top() {
        return q.back();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
 
 //Python
 class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.S=[]

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.S.append(x)

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        p=self.S[-1]
        self.S.pop()
        return p

    def top(self) -> int:
        """
        Get the top element.
        """
        return self.S[-1]

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        if len(self.S)==0: return True
        else: return False
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
