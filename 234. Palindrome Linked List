//C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next){
            return true;
        }
        vector<int> vec;
        while(head){
            vec.push_back(head->val);
            head=head->next;
        }
        for(int i=0;i<vec.size()/2;i++){
            if(vec[i]==vec[vec.size()-1-i]){
                continue;
            }
            else{
                return false;
            }
        }
        return true; 
    }
};

//Python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head or not head.next: return True
        L=[]
        while head:
            L.append(head.val)
            head=head.next
        for i in range(int(len(L)/2)):
            if L[i]==L[-1-i]: continue
            else: return False
        return True
