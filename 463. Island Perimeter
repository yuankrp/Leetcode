//C++
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int p=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]) p+=4;
                if(i<grid.size()-1){
                    if(grid[i][j] && grid[i+1][j]) p-=2;
                    if(j<grid[i].size()-1)
                        if(grid[i][j] && grid[i][j+1]) p-=2;
                }
                else{
                    if(j<grid[i].size()-1){
                        if(grid[i][j] && grid[i][j+1]) p-=2;
                    }
                }
            }
        }
        return p;
    }
};

//Python
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        p=0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j]: p+=4
                if i<len(grid)-1:
                    if grid[i][j] and grid[i+1][j]: p-=2
                    if j<len(grid[i])-1:
                        if grid[i][j] and grid[i][j+1]: p-=2
                else:
                    if j<len(grid[i])-1:
                        if grid[i][j] and grid[i][j+1]: p-=2
        return p
