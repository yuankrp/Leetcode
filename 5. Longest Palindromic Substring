//C++
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.length()==0) return "";
        string res=s.substr(0,1);
        for(int i=1;i<s.length()-1;i++){
            int j=0,k=0;
            if(s[i]==s[i-1]){
                j=i-2;
                k=i+1;
                while(j>=0 && k<s.length() && s[j]==s[k]){
                    j--;
                    k++;
                }
                if(k-j-1>res.length()) res=s.substr(j+1,k-j-1);
            }
            if(s[i-1]==s[i+1]){
                j=i-2;
                k=i+2;
                while(j>=0 && k<s.length() && s[j]==s[k]){
                    j--;
                    k++;
                }
                if(k-j-1>res.length()) res=s.substr(j+1,k-j-1);
            }
        }
        if(res.length()<2 && s[s.length()-1]==s[s.length()-2]) return s.substr(s.length()-2,2);
        return res;
    }
};

//Python
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s)==0: return ""
        res=s[0]
        for i in range(1,len(s)-1):
            if s[i]==s[i-1]:
                j=i-2
                k=i+1
                while j>=0 and k<len(s) and s[j]==s[k]:
                    j-=1
                    k+=1
                print(k,j)
                if k-j-1>len(res): res=s[j+1:k]       
            if s[i-1]==s[i+1]:
                j=i-2
                k=i+2
                while j>=0 and k<len(s) and s[j]==s[k]:
                    j-=1
                    k+=1
                if k-j-1>len(res): res=s[j+1:k]
        if len(res)<2 and s[len(s)-1]==s[len(s)-2]: return s[len(s)-2:len(s)]
        return res
