//C++
/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;

    Node() {}

    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
public:
    Node* intersect(Node* q1, Node* q2) {
        if(q1->isLeaf){
            if(q1->val) return q1;
            else return q2;
        }
        if(q2->isLeaf){
            if(q2->val) return q2;
            else return q1;     
        }
        q1->topLeft = intersect(q1->topLeft, q2->topLeft);
        q1->topRight = intersect(q1->topRight, q2->topRight);
        q1->bottomLeft = intersect(q1->bottomLeft, q2->bottomLeft);
        q1->bottomRight = intersect(q1->bottomRight, q2->bottomRight);
        
        if(q1->topLeft->isLeaf && q1->topRight->isLeaf && q1->bottomLeft->isLeaf && q1->bottomRight->isLeaf){
            if(q1->topLeft->val==q1->topRight->val && q1->topRight->val==q1->bottomLeft->val && q1->bottomLeft->val==q1->bottomRight->val){
                q1->isLeaf = true;
                q1->val = q1->topLeft->val;
            }
        }
        return q1;
    }
};

//Python
"""
# Definition for a QuadTree node.
class Node:
    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):
        self.val = val
        self.isLeaf = isLeaf
        self.topLeft = topLeft
        self.topRight = topRight
        self.bottomLeft = bottomLeft
        self.bottomRight = bottomRight
"""
class Solution:
    def intersect(self, q1: 'Node', q2: 'Node') -> 'Node':
        if q1.isLeaf:
            return q1 if q1.val else q2
        if q2.isLeaf:
            return q2 if q2.val else q1
        
        q1.topLeft = self.intersect(q1.topLeft, q2.topLeft)
        q1.topRight = self.intersect(q1.topRight, q2.topRight)
        q1.bottomLeft = self.intersect(q1.bottomLeft, q2.bottomLeft)
        q1.bottomRight = self.intersect(q1.bottomRight, q2.bottomRight)
        
        if q1.topLeft.isLeaf and q1.topRight.isLeaf and q1.bottomLeft.isLeaf and q1.bottomRight.isLeaf:
            if q1.topLeft.val == q1.topRight.val == q1.bottomLeft.val == q1.bottomRight.val:
                q1.isLeaf = True
                q1.val = q1.topLeft.val
        return q1
