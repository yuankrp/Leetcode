//C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(!s) return false;
        if(isEqual(s,t)) return true;
        return isSubtree(s->left,t) || isSubtree(s->right,t);
    }

    bool isEqual(TreeNode* s, TreeNode* t) {
        if(!s && !t) return true;
        if(!s || !t) return false;
        if(s->val!=t->val) return false;
        return isEqual(s->left,t->left) && isEqual(s->right,t->right);
    }   
};

//Python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if not s: return False
        if self.isEqual(s,t): return True
        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)
        
    def isEqual(self, s: TreeNode, t: TreeNode) -> bool:
        if not s and not t: return True
        if not s or not t: return False
        if s.val!=t.val: return False
        return self.isEqual(s.left,t.left) and self.isEqual(s.right,t.right)
