//C++
class Solution {
public:
    int findLHS(vector<int>& nums) {
        if(nums.size()<2) return 0;
        map<int,int> imap;
        for(int n: nums){
            imap[n]++;
        }
        int s=0;
        for(auto m: imap){
            if(imap.count(m.first+1)){
                s=max(s,imap[m.first+1]+m.second);
            }
        }
        return s;
    }
};

//Python
class Solution:
    def findLHS(self, nums: List[int]) -> int:
        if len(nums)<2: return 0
        L=list(set(nums))
        D=dict.fromkeys(L, 0) 
        s=0
        for n in nums:
            D[n]+=1
        L.sort()
        for i in range(1,len(L)):
            if L[i]-L[i-1]<2:
                temp=D[L[i]]+D[L[i-1]]
                if temp>s: s=temp
        return s
