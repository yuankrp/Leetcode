//C++
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        if(nums.size()==2) return nums[0]*nums[1];
        sort(nums.begin(),nums.end());
        if(nums[nums.size()-1]<=0) return nums[nums.size()-1]*nums[nums.size()-2]*nums[nums.size()-3];
        else return nums[nums.size()-1]*max(nums[nums.size()-2]*nums[nums.size()-3],nums[0]*nums[1]);
    }
};

//Python
class Solution:
    def maximumProduct(self, nums: List[int]) -> int:
        if len(nums)==0: return 0
        if len(nums)==1: return nums[0]
        if len(nums)==2: return nums[0]*nums[1]
        nums.sort()
        if nums[len(nums)-1]<=0:
            return nums[len(nums)-1]*nums[len(nums)-2]*nums[len(nums)-3]
        else:
            return nums[len(nums)-1]*max(nums[len(nums)-2]*nums[len(nums)-3],nums[0]*nums[1])
