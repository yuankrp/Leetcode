//C++
/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
class KthLargest {
private:
    int len;
    priority_queue<int, vector<int>, greater<int>> q;
public:
    KthLargest(int k, vector<int>& nums) {
        len=k;
        for (int num : nums) {
            q.push(num);
            if (q.size() > k) q.pop();
        }
    }
    
    int add(int val) {
        q.push(val);
        if (q.size() > len) q.pop();
        return q.top();
    }
};

//Python
# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.nums=nums
        self.k=k
        self.size=len(self.nums)
        heapq.heapify(self.nums)
        while self.size>k:
            heapq.heappop(self.nums)
            self.size-=1
        
    
    def add(self, val: int) -> int:
        if self.size<self.k:
            heapq.heappush(self.nums,val)
            self.size+=1
        elif val>self.nums[0]:
            heapq.heappush(self.nums,val)
            heapq.heappop(self.nums)
        return self.nums[0]
