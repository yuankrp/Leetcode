//C++
class MyHashMap {
private:
    vector<int> Lkey;
    vector<int> Lval;
public:
    /** Initialize your data structure here. */
    MyHashMap() {
        
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        if(find(Lkey.begin(),Lkey.end(),key)==Lkey.end()){
            Lkey.push_back(key);
            Lval.push_back(value);
        }
        else{
            for(int i=0;i<Lkey.size();i++){
                if(Lkey[i]==key){
                    Lval[i]=value;
                }
            }
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        if(find(Lkey.begin(),Lkey.end(),key)==Lkey.end()){
            return -1;
        }
        else{
            int i;
            for(i=0;i<Lkey.size();i++){
                if(Lkey[i]==key) break;
            }
            return Lval[i];
        }
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        if(find(Lkey.begin(),Lkey.end(),key)!=Lkey.end()){
            for(int i=0;i<Lkey.size();i++){
                if(Lkey[i]==key){
                    Lkey.erase(Lkey.begin()+i);
                    Lval.erase(Lval.begin()+i);
                }
            }
        }
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
 
 //Python
 class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.Lval=[]
        self.Lkey=[]
        

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        if key in self.Lkey:
            for i in range(len(self.Lkey)):
                if self.Lkey[i]==key: self.Lval[i]=value
        else:
            self.Lkey.append(key)
            self.Lval.append(value)
        

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        if key in self.Lkey:
            for i in range(len(self.Lkey)):
                if self.Lkey[i]==key: return self.Lval[i]
        else:
            return -1
        

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        if key in self.Lkey:
            for i in range(len(self.Lkey)):
                if self.Lkey[i]==key:
                    del self.Lkey[i]
                    del self.Lval[i]
                    break
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
 
