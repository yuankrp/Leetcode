//C++
class Solution {
public:
    bool buddyStrings(string A, string B) {
        if(A.length()!=B.length()) return false;
        vector<char> LA,LB,L;
        bool flag=0;
        for(int i=0;i<A.length();i++){
            if(!flag){
                if(find(L.begin(),L.end(),A[i])!=L.end()) flag=1;
                else L.push_back(A[i]);
            }
            if(A[i]!=B[i]){
                LA.push_back(A[i]);
                LB.push_back(B[i]);
            }
        }
        if(LA.size()==0 && LB.size()==0){
            if(flag) return true;
            else return false;
        }  
        else if(LA.size()!=2 || LB.size()!=2) return false;
        else if(LA[0]==LB[1] && LA[1]==LB[0]) return true;
        else return false;
    }
};

//Python
class Solution {
public:
    bool buddyStrings(string A, string B) {
        if(A.length()!=B.length()) return false;
        vector<char> LA,LB,L;
        bool flag=0;
        for(int i=0;i<A.length();i++){
            if(!flag){
                if(find(L.begin(),L.end(),A[i])!=L.end()) flag=1;
                else L.push_back(A[i]);
            }
            if(A[i]!=B[i]){
                LA.push_back(A[i]);
                LB.push_back(B[i]);
            }
        }
        if(LA.size()==0 && LB.size()==0){
            if(flag) return true;
            else return false;
        }  
        else if(LA.size()!=2 || LB.size()!=2) return false;
        else if(LA[0]==LB[1] && LA[1]==LB[0]) return true;
        else return false;
    }
};
