//C++
class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        set<pair<int,int>> S;
        for(vector<int> v: obstacles){
            S.insert(make_pair(v[0],v[1]));
        }
        int x=0,y=0,i=0,res=0;
        vector<int> dx={0,1,0,-1};
        vector<int> dy={1,0,-1,0};
        for(int c: commands){
            if(c==-1) i=(i+1)%4;
            else if(c==-2) i=(i+3)%4;
            else{
                for(int k=0;k<c;k++){
                    if(S.find(make_pair(x+dx[i],y+dy[i]))==S.end()){
                        x=x+dx[i];
                        y=y+dy[i];
                        res=max(res,x*x+y*y);
                    }
                }
            }
        }
        return res;
    }
};

//Python
class Solution:
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        x=0
        y=0
        dx=[0,1,0,-1]
        dy=[1,0,-1,0]
        i=0
        S=set(map(tuple,obstacles))
        res=0
        for c in commands:
            if c==-1: i=(i+1)%4
            elif c==-2: i=(i-1)%4
            else:
                for k in range(c):
                    if (x+dx[i],y+dy[i]) not in S:
                        x+=dx[i]
                        y+=dy[i]
                        res=max(res,x*x+y*y)
        return res
