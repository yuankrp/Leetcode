//C++
class Solution {
public:
    int surfaceArea(vector<vector<int>>& grid) {
        int A=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]!=0){
                    A+=grid[i][j]*4+2;
                    if(i-1>=0 && grid[i-1][j]!=0) A-=min(grid[i][j],grid[i-1][j]);
                    if(i+1<grid.size() && grid[i+1][j]!=0) A-=min(grid[i][j],grid[i+1][j]);
                    if(j-1>=0 && grid[i][j-1]!=0) A-=min(grid[i][j],grid[i][j-1]);
                    if(j+1<grid[i].size() && grid[i][j+1]!=0) A-=min(grid[i][j],grid[i][j+1]);
                }
            }
        }
        return A;
    }
};

//Python
class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        A=0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j]!=0:
                    A+=grid[i][j]*4+2
                    if i-1>=0 and grid[i-1][j]!=0:
                        A-=min(grid[i][j],grid[i-1][j])
                    if i+1<len(grid) and grid[i+1][j]!=0:
                        A-=min(grid[i][j],grid[i+1][j])
                    if j-1>=0 and grid[i][j-1]!=0:
                        A-=min(grid[i][j],grid[i][j-1])
                    if j+1<len(grid[i]) and grid[i][j+1]!=0:
                        A-=min(grid[i][j],grid[i][j+1])
        return A
